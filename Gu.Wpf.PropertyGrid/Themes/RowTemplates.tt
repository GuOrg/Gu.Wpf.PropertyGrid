<#@ template language="C#" #>
<#@ output extension=".generated.xaml" #>
<#@ include file="RowTemplates.ttinclude" #><##>
<#@ assembly name="System.Core" #>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:propertyGrid="clr-namespace:Gu.Wpf.PropertyGrid">
<#
    var prefix = "propertyGrid";
        var namesAndXamls = new[]
        {
            new NameAndXaml(prefix, "StringRow", StringValueXaml),
            new NameAndXaml(prefix, "BoolRow", CheckBoxValueXaml),
            new NameAndXaml(prefix, "CheckBoxRow", CheckBoxValueXaml),
            new NameAndXaml(prefix, "ToggleButtonRow", ToggleButtonValueXaml),
            new NameAndXaml(prefix, "EnumRow", EnumValueXaml),
            new NameAndXaml(prefix, "SelectorRow", ComboBoxValueXaml),
            new NameAndXaml(prefix, "ComboBoxRow", ComboBoxValueXaml),
        };
        foreach(var nameAndXaml in namesAndXamls)
        {
            this.WritePlainTemplate(nameAndXaml);
            this.WriteLine("");
            this.WriteInfoTemplate(nameAndXaml);
            this.WriteLineIfNotLast(nameAndXaml, namesAndXamls);
        } 
        #>
</ResourceDictionary>
<#+
    private const string StringValueXaml = 
    @"                <TextBox x:Name=""PART_Value""
                         IsReadOnly=""{TemplateBinding IsReadOnly}""
                         Text=""{Binding Value,
                                        RelativeSource={RelativeSource TemplatedParent}}"" />
    ";

    private const string CheckBoxValueXaml = 
    @"                        <CheckBox x:Name=""PART_Value""
                                  HorizontalAlignment=""Center""
                                  VerticalAlignment=""Center""
                                  IsChecked=""{Binding Value,
                                                      RelativeSource={RelativeSource TemplatedParent}}""
                                  IsEnabled=""{Binding IsReadOnly,
                                                      RelativeSource={RelativeSource TemplatedParent},
                                                      Converter={x:Static propertyGrid:InvertBoolConverter.Default}}"" />
    ";

    private const string ToggleButtonValueXaml = 
    @"                        <ToggleButton x:Name=""PART_Value""
                                      IsChecked=""{Binding Value,
                                                           RelativeSource={RelativeSource TemplatedParent}}""
                                      IsEnabled=""{TemplateBinding IsReadOnly,
                                                                   Converter={x:Static propertyGrid:InvertBoolConverter.Default}}"" />
    ";

    private const string EnumValueXaml =
     @"                        <ComboBox x:Name=""PART_Value""
                                  IsReadOnly=""{TemplateBinding IsReadOnly}""
                                  ItemsSource=""{TemplateBinding EnumValues}""
                                  SelectedItem=""{Binding Value,
                                                         RelativeSource={RelativeSource TemplatedParent},
                                                         UpdateSourceTrigger=PropertyChanged}"" />
    ";

    private const string ComboBoxValueXaml =
     @"                        <ComboBox x:Name=""PART_Value""
                                  IsReadOnly=""{TemplateBinding IsReadOnly}""
                                  ItemsSource=""{TemplateBinding ItemsSource}""
                                  SelectedItem=""{Binding Value,
                                                         RelativeSource={RelativeSource TemplatedParent},
                                                         UpdateSourceTrigger=PropertyChanged}"" />
    ";

#>