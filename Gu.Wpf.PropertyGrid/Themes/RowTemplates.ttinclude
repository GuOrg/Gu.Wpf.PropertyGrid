<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".txt" #>
<#+
    private const string TextBlockHeaderXaml = 
    @"                <propertyGrid:HeaderBlock x:Name=""PART_Header""
                                          Grid.Row=""0""
                                          Grid.Column=""0""
                                          Style=""{TemplateBinding HeaderStyle}""
                                          Text=""{TemplateBinding Header}"" />
    ";

        private const string TextBoxHeaderXaml = 
    @"                <TextBox x:Name=""PART_Header""
                                 Grid.Row=""0""
                                 Grid.Column=""0""
                                 Focusable=""False""
                                 IsReadOnly=""True""
                                 Style=""{TemplateBinding HeaderStyle}""
                                 Text=""{TemplateBinding Header}"" />
    ";

        private const string TextBlockSuffixXaml = 
    @"                <propertyGrid:SuffixBlock x:Name=""PART_Suffix""
                                          Grid.Row=""0""
                                          Grid.Column=""2""
                                          Style=""{TemplateBinding SuffixStyle}""
                                          Text=""{TemplateBinding Suffix}"" />
    ";

        private const string TextBoxSuffixXaml = 
    @"                        <TextBox x:Name=""PART_Suffix""
                                 Grid.Row=""0""
                                 Grid.Column=""2""
                                 Focusable=""False""
                                 IsReadOnly=""True""
                                 Style=""{TemplateBinding SuffixStyle}""
                                 Text=""{TemplateBinding Suffix}"" />
    ";

        private const string InfoPresenterXaml = 
    @"                        <propertyGrid:RowInfoPresenter x:Name=""InfoPresenter""
                                                       Grid.Row=""1""
                                                       Grid.Column=""0""
                                                       Grid.ColumnSpan=""2""
                                                       Style=""{TemplateBinding InfoPresenterStyle}"" />";

    private const string InfoTemplate =
        @"            <ControlTemplate TargetType=""{{x:Type {0}}}"">
                <Border Margin=""{{TemplateBinding Padding}}""
                        Background=""{{TemplateBinding Background}}""
                        BorderBrush=""{{TemplateBinding BorderBrush}}""
                        BorderThickness=""{{TemplateBinding BorderThickness}}"">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height=""Auto"" />
                            <RowDefinition Height=""Auto"" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition propertyGrid:ColumnDefinition.Source=""Header"" />
                            <ColumnDefinition propertyGrid:ColumnDefinition.Source=""Value"" />
                            <ColumnDefinition propertyGrid:ColumnDefinition.Source=""Suffix"" />
                        </Grid.ColumnDefinitions> 
{1}
{2}
{3}
<!--
{4}
-->
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property=""IsReadOnly"" Value=""True"">
                        <Setter TargetName=""PART_Value"" Property=""Focusable"" Value=""False"" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>";

    private const string PlainTemplate =
        @"            <ControlTemplate TargetType=""{{x:Type {0}}}"">
                <Border Margin=""{{TemplateBinding Padding}}""
                        Background=""{{TemplateBinding Background}}""
                        BorderBrush=""{{TemplateBinding BorderBrush}}""
                        BorderThickness=""{{TemplateBinding BorderThickness}}"">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition propertyGrid:ColumnDefinition.Source=""Header"" />
                            <ColumnDefinition propertyGrid:ColumnDefinition.Source=""Value"" />
                            <ColumnDefinition propertyGrid:ColumnDefinition.Source=""Suffix"" />
                        </Grid.ColumnDefinitions> 
{1}
{2}
{3}
                    </Grid>
                </Border> 
                <ControlTemplate.Triggers>
                    <Trigger Property=""IsReadOnly"" Value=""True"">
                        <Setter TargetName=""PART_Value"" Property=""Focusable"" Value=""False"" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>";

    private void WriteLineIfNotLast<T>(T item, IEnumerable<T> items)
        where T : class 
    {
        if (!ReferenceEquals(items.Last(), item))
        {
            this.WriteLine("");
        }
    }

    private void WritePlainTemplate(NameAndXaml nameAndXaml)
    {
        var valueXaml = SetValueRowColumn(nameAndXaml.Xaml);
#>
    <ControlTemplate x:Key="<#= nameAndXaml.Name #>PlainTemplate" TargetType="{x:Type <#= nameAndXaml.PrefixedName #>}">
        <Border Margin="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition propertyGrid:ColumnDefinition.Source="Header" />
                    <ColumnDefinition propertyGrid:ColumnDefinition.Source="Value" />
                    <ColumnDefinition propertyGrid:ColumnDefinition.Source="Suffix" />
                </Grid.ColumnDefinitions> 
<#= TextBlockHeaderXaml #>
<#= valueXaml #>
<#= TextBlockSuffixXaml #>
            </Grid>
        </Border> 
        <ControlTemplate.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter TargetName="PART_Value" Property="Focusable" Value="False" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
<#+        
    }

    private void WriteInfoTemplate(NameAndXaml nameAndXaml)
    {
        var valueXaml = SetValidationTemplateToNull(nameAndXaml.Xaml);
        valueXaml = Indent(valueXaml, "    ");
#>
    <ControlTemplate x:Key="<#= nameAndXaml.Name #>InfoTemplate" TargetType="{x:Type <#= nameAndXaml.PrefixedName #>}">
        <Border Margin="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition MinHeight="18" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition propertyGrid:ColumnDefinition.Source="Header" />
                    <ColumnDefinition propertyGrid:ColumnDefinition.Source="Value" />
                    <ColumnDefinition propertyGrid:ColumnDefinition.Source="Suffix" />
                </Grid.ColumnDefinitions> 
<#= TextBlockHeaderXaml #>
                <Border Grid.Row="0"
                        Grid.Column="1"
                        BorderBrush="{Binding Foreground,
                                              ElementName=PART_Info}"
                        Margin="0,0,0,-1"
                        BorderThickness="0,0,0,1">
<#= valueXaml #>
                </Border>
<#= TextBlockSuffixXaml #>

                <propertyGrid:InfoBlock x:Name="PART_Info"
                                        Grid.Row="1"
                                        Grid.Column="0"
                                        Grid.ColumnSpan="2">
                    <propertyGrid:InfoBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="Foreground" Value="{x:Null}" />
                        </Style>
                    </propertyGrid:InfoBlock.Style>
                </propertyGrid:InfoBlock>
            </Grid>
        </Border> 
        <ControlTemplate.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter TargetName="PART_Value" Property="Focusable" Value="False" />
            </Trigger>

            <Trigger Property="Validation.HasError" Value="True">
                <Setter TargetName="PART_Info" Property="Style" Value="{Binding ErrorStyle, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Validation.HasError" Value="False" />
                    <Condition Property="IsDirty" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Info" Property="Style" Value="{Binding OldValueStyle, RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
<#+        
    }

    private static string GetInfoTemplate(NameAndXaml nameAndXaml, string headerXaml, string suffixXaml, string infoXaml)
    {
        var valueXaml = SetValidationTemplateToNull(nameAndXaml.Xaml);
        valueXaml = SetValueRowColumn(valueXaml);
        return  string.Format(InfoTemplate, nameAndXaml.PrefixedName, headerXaml, valueXaml, suffixXaml, infoXaml);
    }

    private static string GetPlainTemplate(NameAndXaml nameAndXaml, string headerXaml, string suffixXaml)
    {
        var valueXaml = SetValueRowColumn(nameAndXaml.Xaml);
        return  string.Format(PlainTemplate, nameAndXaml.PrefixedName, headerXaml, valueXaml, suffixXaml);
    }

    private static string SetValidationTemplateToNull(string valueXaml)
    {
        if(valueXaml.Contains("Validation.ErrorTemplate"))
        {
            return "Should not contain Validation.ErrorTemplate";
        }

        var builder = new StringBuilder();
        var rows = GetRows(valueXaml);
        var indentation = GetIndentation(valueXaml);
        for (int i = 0; i < rows.Length; i++)
        {
            if (i < rows.Length - 1)
            {
                builder.AppendLine(rows[i]);
            }
            else
            {
                builder.AppendLine(RemoveEndTag(rows[i]));
                builder.Append(indentation);
                builder.Append(@"Validation.ErrorTemplate=""{x:Null}"" />");
                builder.AppendLine();
            }
        }

        return builder.ToString();
    }

    private static string SetValueRowColumn(string valueXaml)
    {
        if(valueXaml.Contains("Grid.Row="))
        {
            return "Template should not contain Grid.Row";
        }

        if(valueXaml.Contains("Grid.Column="))
        {
            return "Template should not contain Grid.Column";
        }

        if (valueXaml.Contains("Focusable="))
        {
               return "Template should not contain Focusable";
        }

        var builder = new StringBuilder();
        var rows = GetRows(valueXaml);
        builder.AppendLine(rows[0]);
        var indentation = GetIndentation(valueXaml);
        builder.AppendLine(indentation + "Grid.Row=\"0\"");
        builder.AppendLine(indentation + "Grid.Column=\"1\"");

        for (int i = 1; i < rows.Length; i++)
        {
            builder.AppendLine(rows[i]);
        }

        return builder.ToString();
    }

    private static string Indent(string xaml, string indent)
    {
        var builder = new StringBuilder();
        foreach (var row in GetRows(xaml))
        {
            builder.Append(indent);
            builder.AppendLine(row);
        }

        return builder.ToString();
    }

    private static string[] GetRows(string text)
    {
        return text.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
                   .Where(s => !string.IsNullOrWhiteSpace(s))
                   .ToArray();
    }

    private static string GetIndentation(string text)
    {
        var row = GetRows(text)[0];
        var xNamePartValue = @"x:Name=""PART_Value""";
        var indexOf = row.IndexOf(xNamePartValue);
        if (indexOf < 0)
        {
            return $"first attribute should  be: '{xNamePartValue}'";
        }
        return new string(' ', indexOf);
    }

    private static string RemoveEndTag(string text)
    {
        return text.Substring(0, text.LastIndexOf("/>"))
                   .TrimEnd();
    }

    public  class NameAndXaml
    {
        internal readonly string Prefix;
        internal readonly string Name;
        internal readonly string Xaml;

        public NameAndXaml(string prefix,string name, string xaml)
        {
            this.Prefix = prefix;
            this.Name = name;
            this.Xaml = xaml;
        }

        public string PrefixedName
        {
            get { return this.Prefix + ":" + this.Name; }
        }
    }
#>