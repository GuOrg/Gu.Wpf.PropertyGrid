<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".generated.cs" #>
#pragma warning disable SA1402 // File may only contain a single class
namespace Gu.Wpf.PropertyGrid
{
    using System.Windows;

    public static partial class PropertyGrid
    {
<#
    var propertyMetaDatas = new[]
                     {
                        new PropertyMetaData("IsReadOnly","bool","false"),
                        new PropertyMetaData("OldValueStringFormat","string","\"Old value: {0}\""),
                        new PropertyMetaData("OldDataContext","object","null", "OnOldDataContextChanged"),
                     };

    foreach(var propertyMetaData in propertyMetaDatas)
    {
        #>
        /// <summary>Identifies the <#= propertyMetaData.Name #> attached dependency property.</summary>
        public static readonly DependencyProperty <#= propertyMetaData.Name #>Property = DependencyProperty.RegisterAttached(
            "<#= propertyMetaData.Name #>",
            typeof(<#= propertyMetaData.Type #>),
            typeof(PropertyGrid),
            new FrameworkPropertyMetadata(
                <#= propertyMetaData.DefaultValue #>,
                FrameworkPropertyMetadataOptions.Inherits));

<#
    } 

    foreach(var propertyMetaData in propertyMetaDatas)
    {
        #>
        /// <summary>
        /// Helper for setting <#= propertyMetaData.Name #> property on a UIElement.
        /// </summary>
        /// <param name="element">UIElement to set <#= propertyMetaData.Name #> property on.</param>
        /// <param name="value"><#= propertyMetaData.Name #> property value.</param>
        public static void Set<#= propertyMetaData.Name #>(this UIElement element, <#= propertyMetaData.Type #> value)
        {
            element.SetValue(<#= propertyMetaData.Name #>Property, value);
        }

        /// <summary>
        /// Helper for reading <#= propertyMetaData.Name #> property from a UIElement.
        /// </summary>
        /// <param name="element">UIElement to read <#= propertyMetaData.Name #> property from.</param>
        /// <returns><#= propertyMetaData.Name #> property value.</returns>
        [AttachedPropertyBrowsableForChildren(IncludeDescendants = false)]
        [AttachedPropertyBrowsableForType(typeof(UIElement))]
        public static <#= propertyMetaData.Type #> Get<#= propertyMetaData.Name #>(this UIElement element)
        {
            return (<#= propertyMetaData.Type #>)element.GetValue(<#= propertyMetaData.Name #>Property);
        }
<#  
    this.WriteLineIfNotLast(propertyMetaData, propertyMetaDatas);
    }
         #>
    }
<#
    var controlNames = new[]
                        {
                            new ClassMetaData("Row", true),
                            new ClassMetaData("Rows", false),
                            new ClassMetaData("ContentRow", false)
                        };

    foreach(var controlName in controlNames)
    { 
    #>

    public <#= controlName.IsAbstract ? "abstract " : "" #>partial class <#= controlName.Name #>
    {
<#
        foreach(var propertyMetaData in propertyMetaDatas)
        {
             #>
        /// <summary>Identifies the <#= propertyMetaData.Name #> dependency property.</summary>
        public static readonly DependencyProperty <#= propertyMetaData.Name #>Property = PropertyGrid.<#= propertyMetaData.Name #>Property.AddOwner(
            typeof(<#= controlName.Name #>),
            new FrameworkPropertyMetadata(
                <#= propertyMetaData.DefaultValue #>,
                FrameworkPropertyMetadataOptions.Inherits<#= propertyMetaData.OnPropertyChanged #>));

<#
        } 

        foreach(var propertyMetaData in propertyMetaDatas)
        {
             #>
        /// <summary>
        /// Gets or sets the <#= propertyMetaData.Name #>.
        /// </summary>
        public <#= propertyMetaData.Type #> <#= propertyMetaData.Name #>
        {
            get { return (<#= propertyMetaData.Type #>)this.GetValue(<#= propertyMetaData.Name #>Property); }
            set { this.SetValue(<#= propertyMetaData.Name #>Property, value); }
        }
<#
    this.WriteLineIfNotLast(propertyMetaData, propertyMetaDatas);
    } 
            #>
    }
<#
        } 
        #>
}
<#+
    private void WriteLineIfNotLast<T>(T item, IEnumerable<T> items)
        where T : class 
    {
        if (!ReferenceEquals(items.Last(), item))
        {
            this.WriteLine("");
        }
    }

   private class PropertyMetaData
   {
       public readonly string Name;
       public readonly string Type;
       public readonly string DefaultValue;
       public readonly string OnPropertyChanged;

       public PropertyMetaData(string name, string type, string defaultValue, string onPropertyChanged = null)
       {
           this.Name = name;
           this.Type = type;
           this.DefaultValue = defaultValue;
           this.OnPropertyChanged = string.IsNullOrEmpty(onPropertyChanged)
                                        ? ""
                                        : $@",
                {onPropertyChanged}";
       }
   }

   private class ClassMetaData
   {
       public readonly string Name;
       public readonly bool IsAbstract;

       public ClassMetaData(string name, bool isAbstract)
       {
           this.Name = name;
           this.IsAbstract = isAbstract;
       }
   }
#>

