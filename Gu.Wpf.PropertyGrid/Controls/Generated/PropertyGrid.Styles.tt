<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".generated.cs" #>
#pragma warning disable SA1402 // File may only contain a single class
namespace Gu.Wpf.PropertyGrid
{
    using System.Windows;

    public static partial class PropertyGrid
    {
<#
    var styles = new[]
                     {
                         "OldValueStyle",
                         "ErrorStyle", 
                     };
    foreach(var styleName in styles)
    {
        #>
        /// <summary>Identifies the <#= styleName #> attached dependency property.</summary>
        public static readonly DependencyProperty <#= styleName #>Property = DependencyProperty.RegisterAttached(
            "<#= styleName #>",
            typeof(Style),
            typeof(PropertyGrid),
            new FrameworkPropertyMetadata(
                default(Style),
                FrameworkPropertyMetadataOptions.Inherits));

<#
    } 

    foreach(var styleName in styles)
    {
        #>
        /// <summary>
        /// Helper for setting <#= styleName #> property on a UIElement.
        /// </summary>
        /// <param name="element">UIElement to set <#= styleName #> property on.</param>
        /// <param name="value"><#= styleName #> property value.</param>
        public static void Set<#= styleName #>(this UIElement element, Style value)
        {
            element.SetValue(<#= styleName #>Property, value);
        }

        /// <summary>
        /// Helper for reading <#= styleName #> property from a UIElement.
        /// </summary>
        /// <param name="element">UIElement to read <#= styleName #> property from.</param>
        /// <returns><#= styleName #> property value.</returns>
        [AttachedPropertyBrowsableForChildren(IncludeDescendants = false)]
        [AttachedPropertyBrowsableForType(typeof(UIElement))]
        public static Style Get<#= styleName #>(this UIElement element)
        {
            return (Style)element.GetValue(<#= styleName #>Property);
        }
<#    
        this.WriteLineIfNotLast(styleName, styles);  
    }
         #>
    }

    public partial class Rows
    {
<#
    foreach(var styleName in styles)
    {
             #>
        /// <summary>Identifies the <#= styleName #> dependency property.</summary>
        public static readonly DependencyProperty <#= styleName #>Property = PropertyGrid.<#= styleName #>Property.AddOwner(
            typeof(Rows),
            new FrameworkPropertyMetadata(
                default(Style),
                FrameworkPropertyMetadataOptions.Inherits));

<#
    } 

    foreach(var styleName in styles)
    {
             #>
        /// <summary>
        /// Gets or sets the <#= styleName #>.
        /// </summary>
        public Style <#= styleName #>
        {
            get { return (Style)this.GetValue(<#= styleName #>Property); }
            set { this.SetValue(<#= styleName #>Property, value); }
        }
<#
        this.WriteLineIfNotLast(styleName, styles);
    } 
            #>
    }
<#
    var controlNames = new[]
                        {
                            new ClassMetaData("Row", true),
                        };
    foreach(var controlName in controlNames)
    {
         #>

    public <#= controlName.IsAbstract ? "abstract " : "" #>partial class <#= controlName.Name #>
    {
<#
        foreach(var styleName in styles)
        {
             #>
        /// <summary>Identifies the <#= styleName #> dependency property.</summary>
        public static readonly DependencyProperty <#= styleName #>Property = PropertyGrid.<#= styleName #>Property.AddOwner(
            typeof(<#= controlName.Name #>),
            new FrameworkPropertyMetadata(
                default(Style),
                FrameworkPropertyMetadataOptions.Inherits,
                OnPartStyleChanged));

<#
        } 

        foreach(var styleName in styles)
        {
             #>
        /// <summary>
        /// Gets or sets the <#= styleName #>.
        /// </summary>
        public Style <#= styleName #>
        {
            get { return (Style)this.GetValue(<#= styleName #>Property); }
            set { this.SetValue(<#= styleName #>Property, value); }
        }
<#
            this.WriteLineIfNotLast(styleName, styles);
        } 
            #>

        private static void OnPartStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
        }
    }
<#
        } 
        #>
}
<#+
    private void WriteLineIfNotLast<T>(T item, IEnumerable<T> items)
        where T : class 
    {
        if (!ReferenceEquals(items.Last(), item))
        {
            this.WriteLine("");
        }
    }

   private class ClassMetaData
   {
       public readonly string Name;
       public readonly bool IsAbstract;

       public ClassMetaData(string name, bool isAbstract)
       {
           this.Name = name;
           this.IsAbstract = isAbstract;
       }
   }
#>
