<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".generated.cs" #>
#pragma warning disable SA1402 // File may only contain a single class
namespace Gu.Wpf.PropertyGrid
{
    using System.Windows;

    public static partial class PropertyGrid
    {
<#
    var columns = new[]
        {
            new ColumnMetaData("Header"), 
            new ColumnMetaData("Value"), 
            new ColumnMetaData("Suffix")
        };

    var widths = columns.SelectMany(x => x.Widths).ToArray();
    foreach(var columnWidth in widths)
    {
        #>
        /// <summary>Identifies the <#= columnWidth.PropertyName #> attached dependency property.</summary>
        public static readonly DependencyProperty <#= columnWidth.PropertyName #>Property = DependencyProperty.RegisterAttached(
            "<#= columnWidth.PropertyName #>",
            typeof(<#= columnWidth.Type #>),
            typeof(PropertyGrid),
            new FrameworkPropertyMetadata(
                <#= columnWidth.DefaultValue #>,
                FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsArrange | FrameworkPropertyMetadataOptions.Inherits));

<#
    }

    foreach(var columnWidth in widths)
    {
        #>
        /// <summary>
        /// Helper for setting <#= columnWidth.PropertyName #> property on a UIElement.
        /// </summary>
        /// <param name="element">UIElement to set <#= columnWidth.PropertyName #> property on.</param>
        /// <param name="value"><#= columnWidth.PropertyName #> property value.</param>
        public static void Set<#= columnWidth.PropertyName #>(this UIElement element, <#= columnWidth.Type #> value)
        {
            element.SetValue(<#= columnWidth.PropertyName #>Property, value);
        }

        /// <summary>
        /// Helper for reading <#= columnWidth.PropertyName #> property from a UIElement.
        /// </summary>
        /// <param name="element">UIElement to read <#= columnWidth.PropertyName #> property from.</param>
        /// <returns><#= columnWidth.PropertyName #> property value.</returns>
        [AttachedPropertyBrowsableForChildren(IncludeDescendants = false)]
        [AttachedPropertyBrowsableForType(typeof(UIElement))]
        public static <#= columnWidth.Type #> Get<#= columnWidth.PropertyName #>(this UIElement element)
        {
            return (<#= columnWidth.Type #>)element.GetValue(<#= columnWidth.PropertyName #>Property);
        }
<#   
        this.WriteLineIfNotLast(columnWidth, widths);
    }
         #>
    }
<#
    var controlNames = new[]
        {
            new ClassMetaData("Rows", false),
            new ClassMetaData("Row", true),
            new ClassMetaData("ContentRow", false)
        };
    foreach(var controlName in controlNames)
    {
         #>

    public <#= controlName.IsAbstract ? "abstract " : "" #>partial class <#= controlName.Name #>
    {
<#
        foreach(var columnWidth in widths)
        {
             #>
        /// <summary>Identifies the <#= columnWidth.PropertyName #> attached dependency property.</summary>
        public static readonly DependencyProperty <#= columnWidth.PropertyName #>Property = PropertyGrid.<#= columnWidth.PropertyName #>Property.AddOwner(
            typeof(<#= controlName.Name #>),
            new FrameworkPropertyMetadata(
                <#= columnWidth.DefaultValue #>,
                FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsArrange | FrameworkPropertyMetadataOptions.Inherits));

<#
        } 

        foreach(var columnWidth in widths)
        {
             #>
        /// <summary>
        /// Gets or sets the <#= columnWidth.PropertyName #>.
        /// </summary>
        public <#= columnWidth.Type #> <#= columnWidth.PropertyName #>
        {
            get { return (<#= columnWidth.Type #>)this.GetValue(<#= columnWidth.PropertyName #>Property); }
            set { this.SetValue(<#= columnWidth.PropertyName #>Property, value); }
        }
<#
            this.WriteLineIfNotLast(columnWidth, widths);
        } 
            #>
    }
<#
        } 
        #>
}
<#+

    private void WriteLineIfNotLast<T>(T item, IEnumerable<T> items)
        where T : class 
    {
        if (!ReferenceEquals(items.Last(), item))
        {
            this.WriteLine("");
        }
    }

    private class ClassMetaData
    {
        public readonly string Name;
        public readonly bool IsAbstract;

        public ClassMetaData(string name, bool isAbstract)
        {
            this.Name = name;
            this.IsAbstract = isAbstract;
        }
    }

    private class ColumnMetaData 
    {
        public readonly IReadOnlyList<WidthMetaData> Widths;

        public ColumnMetaData(string name)
        {
            this.Widths = new[]
                              {
                                  new WidthMetaData(name + "Width", "GridLength", "GridLength.Auto"),
                                  new WidthMetaData(name + "MinWidth", "double", "0.0"),
                                  new WidthMetaData(name + "MaxWidth", "double", "double.PositiveInfinity"),
                              };
        }
    }

    private class WidthMetaData
    {
        public readonly string PropertyName;
        public readonly string DefaultValue;
        public readonly string Type;

        public WidthMetaData(string propertyName, string type, string defaultValue)
        {
            this.PropertyName = propertyName;
            this.Type = type;
            this.DefaultValue = defaultValue;
        }
    }

#>
